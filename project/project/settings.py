"""
Django settings for project project.

Generated by 'django-admin startproject' using Django 4.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
import boto3

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

ENVIRONMENT = os.getenv('ENVIRONMENT', 'local')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-faa83cdn**1a1+!x7#woxv%4bnptttw#p=(79ug77bh(8g*v!#'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'FALSE').upper() == 'TRUE'

DOMAIN = os.getenv('DOMAIN', 'localhost:8000')

ALLOWED_HOSTS = ['0.0.0.0', '192.168.0.108', 'localhost', '127.0.0.1', DOMAIN, '*']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_crontab',
    'cbo',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates')
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': os.getenv('DB_NAME'),
        'USER': os.getenv('DB_USER'),
        'PASSWORD': os.getenv('DB_PASSWORD'),
        'HOST': os.getenv('DB_HOST'),
        'PORT': os.getenv('DB_PORT'),
    }
}
    

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# AUTHENTICATION_BACKENDS = [
#     'path.to.EmailBackend',
#     'django.contrib.auth.backends.ModelBackend',
# ]

AUTH_USER_MODEL = 'cbo.User'

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'pt-br'  # Defina o idioma padrão
TIME_ZONE = 'America/Sao_Paulo'  # Defina o fuso horário padrão

USE_I18N = True
USE_L10N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

CRONJOBS = [
    ('0 0 1 * *', 'cbo.utils.django_management_command'),
]

CRONTAB_AUTODISCOVER = True

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_FROM = 'sembooficial@gmail.com'
EMAIL_HOST_USER = 'sembooficial@gmail.com'
EMAIL_HOST_PASSWORD = 'ksghszfbpazriqiq'
EMAIL_USE_TLS = True
PASSWORD_RESET_TIMEOUT = 14400 

#Midia
MEDIA_URL = '/media/'

if ENVIRONMENT != 'local':
    #AWS CREDENTIALS
    AWS_ACCESS_KEY_ID = os.getenv('AWS_ACCESS_KEY_ID') 
    AWS_SECRET_ACCESS_KEY = os.getenv('AWS_SECRET_ACCESS_KEY') 
    AWS_REGION = os.getenv('AWS_REGION') 
    AWS_STORAGE_BUCKET_NAME = os.getenv('AWS_STORAGE_BUCKET_NAME')
    AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com'

    if not AWS_ACCESS_KEY_ID or not AWS_SECRET_ACCESS_KEY or not AWS_REGION:
        raise ValueError("AWS credentials are not set in environment variables.")

    #BOTO3 SESSION
    CLOUDWATCH_CLIENT = boto3.client(
        'logs',
        aws_access_key_id=AWS_ACCESS_KEY_ID,
        aws_secret_access_key=AWS_SECRET_ACCESS_KEY,
        region_name=AWS_REGION
    )

    #LOGGERS CLOUDWATCH
    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'handlers': {
            'console': {
                'level': 'DEBUG',
                'class': 'logging.StreamHandler',
            },
            'cloudwatch': {
                'level': 'DEBUG',
                'class': 'cbo.logging_handlers.LoggerNameStreamHandler',
                'log_group': f'sem-bo/{ENVIRONMENT}',      
                'create_log_group': True,
                'use_queues': True,
                'boto3_client': CLOUDWATCH_CLIENT,
                'send_interval': 30,
            },
        },
        'loggers': {
            'django': {
                'handlers': ['console', 'cloudwatch'],
                'level': 'DEBUG',
                'propagate': True,
            },
            'upload_files_view': {
                'handlers': ['console', 'cloudwatch'],
                'level': 'DEBUG',
                'propagate': False,
            },
            'import_procedure_has_occupation': {
                'handlers': ['console', 'cloudwatch'],
                'level': 'DEBUG',
                'propagate': False,
            },
        },
    }

    #STORAGE 4S3
    # Check if AWS_STORAGE_BUCKET_NAME is defined

    USE_S3 = os.getenv('USE_S3') == 'TRUE'
    if USE_S3:
        STATICFILES_LOCATION = 'static'
        STATICFILES_STORAGE = 'cbo.utils.storages.S3StaticStorage'

        MEDIAFILES_LOCATION = 'media'
        DEFAULT_FILE_STORAGE = 'cbo.utils.storages.S3MediaStorage'